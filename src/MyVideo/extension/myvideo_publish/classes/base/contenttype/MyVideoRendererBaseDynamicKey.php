<?php
/**
 * Render an eZPublish contentType with dynamically generated redis keys
 */
class MyVideoRendererBaseDynamicKey extends MyVideoRendererBase implements MyVideoRendererInterface
{
    /**
     * The fixed part of the redis key,
     * mapped by the campaign prefix depending on the locales
     * @var array
     */
    protected $partIdentifierPrefix = array('default' => 'Campaign/',
        'ger-DE' => 'Aktion/');


    /**
     * The dynamic part of the redis key
     * @var array
     */
    protected $dynamicRedisKeyPartsKeys = array();

    protected $campaignUrl = null;

    protected $keyToDelete = null;
    protected $shouldGetLastPartIdentifier = false;

    protected function setKeyToDelete($oldKey, $newKey)
    {
        if ($oldKey !== $newKey) {
            $this->keyToDelete = $oldKey;
        }
    }

    /**
     * Key list which parts of the redis key should be generated by a special mapping
     * @var array
     */
    protected $keyPartOverride = array();

    /**
     * Maps given content fields for redis key parts
     *
     * Overwrite this functions in derived classes to your needs!
     *
     * @param $specialKey
     * @param array $ezObjectFields
     * @param bool $lookupOldKey
     */
    protected function getRedisKeyStringOverrides($specialKey, array $ezObjectFields, $lookupOldKey = false)
    {
    }

    protected function getKeyToDelete()
    {
        return $this->keyToDelete;
    }

    /**
     * Get the fixed redis key part by language
     *
     * @param string $language
     * @return string
     */
    protected function getPartIdentifierPrefix($language)
    {
        if (array_key_exists($language, $this->partIdentifierPrefix)) {
            return $this->partIdentifierPrefix[$language];
        } else {
            return $this->partIdentifierPrefix['default'];
        }
    }

    /**
     * this string has to build automatically depending on the campaign data given
     * @return string
     */
    protected function fetchKeyPartIdentifier()
    {
        $language = $this->getLanguage();

        // if flag is set, the last published key part is given. Needed if deletion is executed
        if ($this->shouldGetLastPartIdentifier !== false && $this->getKeyToDelete()) {
            return '/' . $this->getPartIdentifierPrefix($language) . $this->getKeyToDelete();
        }

        $objData = parent::render();

        $newRedisKeyString = $this->buildRedisKeyString($this->dynamicRedisKeyPartsKeys, $objData['fields']);

        // check if there is an older version and if the redis key was changed. If so, set delete flag
        $lastObjectVersionData = MyVideoUtils::fetchLastObjectData($this->ContentObject, $language);

        if (null != $lastObjectVersionData) {
            $oldRedisKeyString = $this->buildRedisKeyString($this->dynamicRedisKeyPartsKeys, $lastObjectVersionData, true);
            $this->setKeyToDelete($oldRedisKeyString, $newRedisKeyString);
        }
        return '/' . $this->getPartIdentifierPrefix($language) . $newRedisKeyString;
    }

    /**
     * Builds the redis key for an ez publish object
     *
     * @param array $keyList list of content keys to become part of the redis key
     * @param array $ezObjectFields the ez object as array
     * @param bool $lookupOldKey indicated if an existing key should be generated
     * @return string
     */
    protected function buildRedisKeyString(array $keyList, array $ezObjectFields, $lookupOldKey = false)
    {
        $keyString = '';

        foreach ($keyList as $keyPart) {
            if (in_array($keyPart, $this->keyPartOverride)) {
                $keyString .= '/' . $this->getRedisKeyStringOverrides($keyPart, $ezObjectFields, $lookupOldKey);
            } else {
                if ($lookupOldKey === false) {
                    $keyString .= '/' . $ezObjectFields[$keyPart]['content'];
                } else {
                    $keyString .= '/' . $ezObjectFields[$keyPart];
                }
            }
        }

        $keyString = $this->prepareCampaignUrl($keyString);

        return $keyString;
    }

    /**
     * beware that the campaign url is a valid string to use in the url
     * @param string $campaignUrl
     * @return string
     */
    protected function prepareCampaignUrl($campaignUrl)
    {
        $campaignUrl = preg_replace("/[^\/A-Za-z0-9-_]/", "", $campaignUrl);
        return ltrim($campaignUrl, '/');
    }

    // if campaign url was changed. Delete the last published redis key so we don't have multiple urls for one campaign
    protected function deleteOldKey()
    {
        $this->shouldGetLastPartIdentifier = true;
        $key = $this->fetchKey();
        $this->shouldGetLastPartIdentifier = false;
        $storage = new MyVideoStorageRedis();
        $storage->delete($key);
    }

    public function render()
    {
        return parent::render();
    }
}
